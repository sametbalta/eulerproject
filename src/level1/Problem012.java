/**
 * Highly divisible triangular number
 * https://projecteuler.net/problem=12
 */
/* 
 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

 Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.

 What is the value of the first triangle number to have over five hundred divisors?
 */
package level1;

import java.util.ArrayList;
import java.util.List;

public class Problem012 {

	private final static int N = 500;

	private static List<Integer> primeList = new ArrayList<Integer>();

	public static void main(String[] args) {
		long startTime = System.currentTimeMillis();
		int answer = 0;
		int i = 2;
		while (true) {
			int triangleNumber = i * (i + 1) / 2;
			int count = dividorCount(triangleNumber);
			if (count > N) {
				System.out.println("number is <" + triangleNumber + "> dividor count is <" + count + ">");
				answer = triangleNumber;
				break;
			}
			i++;
		}

		System.out.println("Answer: " + answer);
		long stopTime = System.currentTimeMillis();
		long elapsedTime = stopTime - startTime;
		System.out.println("Execution time is " + elapsedTime + " milliseconds");
	}

	private static int dividorCount(int triangleNumber) {
		for (int prime : primeList) {
			if (triangleNumber % prime > 0) {
				return 0;
			}
		}
		int count = 1; // itself
		for (int i = 1; i <= triangleNumber / 2; i++) {
			if (triangleNumber % i == 0) {
				if (!primeList.contains(i)) {
					primeList.add(i);
				}
				count++;
			}
		}
		return count;
	}

}
